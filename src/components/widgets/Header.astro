---
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash } from '~/utils/permalinks';
import type { CallToAction } from '~/types';
import SpaceButton from '../ui/SpaceButton.astro';
import SocialMediaMobile from '../ui/SocialMediaMobile.astro';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends CallToAction {}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  /*   actions = [], */
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
console.log(currentPath);
---

<header
  transition:persist
  class:list={[
    { absolute: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 md:px-6 mx-auto w-full md:flex md:justify-between',
      {
        'max-w-full': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu transition:persist />
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto hidden md:flex text-default overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:mx-5"
      aria-label="Main navigation"
    >
      <ul
        transition:persist
        class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              <a
                id="test"
                class:list={['text-blue px-4 py-3 flex items-centers' /* { 'aw-link-active': href === currentPath } */]}
                href={href}
              >
                {text}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center flex md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0',
      ]}
    >
      <div class="items-center flex flex-col gap-10 pb-10 md:pb-0 justify-start w-full md:w-auto">
        <SpaceButton href="https://softwow-fidelization.web.app" text="Sorteo" />
        <SocialMediaMobile />
      </div>
    </div>
  </div>
</header>

<script>
  // Crear un componente personalizado de Astro llamado "astro-header"
  class AstroHeader extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      // Obtener datos del atributo data
      const linksData = this.dataset.links;
      const currentPath = this.dataset.currentpath;

      // Agregar un controlador de eventos al objeto window para escuchar cambios en la URL
      window.addEventListener('popstate', () => {
        // Obtener el elemento con id "test"
        const item = this.querySelector('test');

        // Comprobar si linksData no es undefined antes de analizarlo
        if (linksData) {
          const links = JSON.parse(linksData);

          // Recorrer el array de links
          links.forEach((link) => {
            if (link.href === currentPath) {
              // Si el href coincide con el currentPath, aplicar una clase al elemento
              if (item) {
                item.classList.add('aw-link-active');
              }
            }
          });
        }
      });
    }
  }

  customElements.define('astro-header', AstroHeader);
</script>

<style>
  .aw-link-active {
    color: #03a9f4;
  }
  .text-blue:hover {
    color: #03a9f4;
  }
</style>
